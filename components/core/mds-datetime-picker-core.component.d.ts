import { OnInit, EventEmitter } from '@angular/core';
import { MdsDatetimePickerResourcesService } from '../../services/mds-datetime-picker-resources.service';
import { TemplateTypeEnum } from "../../assests/enums";
import { IDate, IRangeDate, IDay } from "../../assests/interfaces";
export declare class MdsDatetimePickerCoreComponent implements OnInit {
    private resourcesService;
    constructor(resourcesService: MdsDatetimePickerResourcesService);
    ngOnInit(): void;
    templateType: TemplateTypeEnum;
    initialValue: string;
    persianChar: boolean;
    isPersian: boolean;
    rangeSelector: boolean;
    timePicker: boolean;
    format: string;
    dateChanged: EventEmitter<IDate>;
    rangeDateChanged: EventEmitter<IRangeDate>;
    daysAnimationStateName: string;
    monthOrYearSelectorVisibilityStateName: string;
    monthSelectorVisibilityStateName: string;
    yearSelectorVisibilityStateName: string;
    private showMonthSelectorBlock;
    private showYearsSelectorBlock;
    private splitStartEndDateString(dateString);
    private setSelectedRangeDateTimes(dateTimes);
    private setSelectedRangePersianDateTimes(persianDateTimes);
    private readonly persianStartDayOfMonth;
    private readonly gregorianStartDayOfMonth;
    setDateTimeByDate(dateTime: Date): void;
    setDateTime(date: IDate): void;
    setDateTimeByString(dateTimeString: string): void;
    clearDateTimePicker(): void;
    private _dateTime;
    private dateTime;
    private _persianDateTime;
    private readonly persianDateTime;
    private _selectedDateTime;
    private selectedDateTime;
    private _selectedPersianDateTime;
    private readonly selectedPersianDateTime;
    private _selectedStartDateTime;
    private selectedStartDateTime;
    private _selectedPersianStartDateTime;
    private readonly selectedPersianStartDateTime;
    private _selectedEndDateTime;
    private selectedEndDateTime;
    private _selectedPersianEndDateTime;
    private readonly selectedPersianEndDateTime;
    private startMdsPersianDateTimeToDateTemp;
    private endMdsPersianDateTimeToDateTemp;
    yearsToSelect: string[];
    daysInMonth: IDay[];
    weekDayNames: string[];
    resources: any;
    private _year;
    readonly year: number;
    private _yearString;
    readonly yearString: string;
    private _month;
    private readonly month;
    private _monthName;
    readonly monthName: string;
    private _hour;
    readonly hour: number;
    private _hourString;
    readonly hourString: string;
    private _minute;
    readonly minute: number;
    private _minuteString;
    readonly minuteString: string;
    private _second;
    readonly second: number;
    private _secondString;
    readonly secondString: string;
    private _monthNames;
    readonly monthNames: string[];
    private _weekdayNames;
    readonly weekdayNames: string[];
    private _iDate;
    readonly getSelectedDateObject: IDate;
    readonly getSelectedDay: number;
    private _selectedRangeDatesObject;
    readonly getSelectedRangeDatesObject: IRangeDate;
    readonly isRejectButtonDisable: boolean;
    readonly isConfirmButtonDisable: boolean;
    private updateYearsList();
    private getDayObject(year, month, day, disabled, holiday, isToday);
    private readonly isRangeSelectorReady;
    private updateMonthDays();
    private fireChangeEvent();
    private fireRangeChangeEvent();
    private resetToFalseRangeParametersInMonthDays();
    hideSelecMonthAndYearBlock(): void;
    resetIncompleteRanges(): void;
    monthButtonOnClick(): void;
    selectYearButtonOnClick(): void;
    monthsBlockVisibilityAnimationDone(): void;
    yearsBlockVisibilityAnimationDone(): void;
    nextYearButtonOnClick(): void;
    nextMonthButtonOnClick(): void;
    previousMonthButtonOnClick(): void;
    previousYearButtonOnClick(): void;
    hourUpButtonOnClick(): void;
    hourDownButtonOnClick(): void;
    minuteUpButtonOnClick(): void;
    minuteDownButtonOnClick(): void;
    secondUpButtonOnClick(): void;
    secondDownButtonOnClick(): void;
    monthOnClick(selectedMonthName: any): void;
    yearOnClick(selectedYear: any): void;
    todayButtonOnClick(): void;
    dayButtonOnClick(dayObject: IDay): void;
    dayButtonOnHover(dayObject: IDay): void;
    rejectButtonOnClick(): void;
    confirmButtonOnClick(): void;
}
